create table ootb_perfect_store.calendar_dim
as
(

-- no option currently to add translations to calendar values, like Weekdays, Month, etc...
SELECT
    date as date_pk,
    date,
    extract(year from date) || ' W' || format_date ('%W', date (date)) as year_week,
    min(date) over (partition by extract(year from date) || 'W ' || format_date ('%W', date (date))) as year_week_id,
    extract(year from date) || ' Q' || extract(quarter from date) as year_quarter,
    min(date) over (partition by extract(year from date) || ' Q' || extract(quarter from date)) as year_quarter_id,
    extract(year from date) || ' ' ||
    case
        when format_date ('%m', date (date)) = '01' then 'january'
        when format_date ('%m', date (date)) = '02' then 'february'
        when format_date ('%m', date (date)) = '03' then 'march'
        when format_date ('%m', date (date)) = '04' then 'april'
        when format_date ('%m', date (date)) = '05' then 'may'
        when format_date ('%m', date (date)) = '06' then 'june'
        when format_date ('%m', date (date)) = '07' then 'july'
        when format_date ('%m', date (date)) = '08' then 'august'
        when format_date ('%m', date (date)) = '09' then 'september'
        when format_date ('%m', date (date)) = '10' then 'october'
        when format_date ('%m', date (date)) = '11' then 'november'
        when format_date ('%m', date (date)) = '12' then 'december'
    end as year_month,
    min(date) over (partition by format_date ('%Y %B', date (date))) as year_month_id, -- sort year_month
    case
        when format_date ('%m', date (date)) = '01' then 'january'
        when format_date ('%m', date (date)) = '02' then 'february'
        when format_date ('%m', date (date)) = '03' then 'march'
        when format_date ('%m', date (date)) = '04' then 'april'
        when format_date ('%m', date (date)) = '05' then 'may'
        when format_date ('%m', date (date)) = '06' then 'june'
        when format_date ('%m', date (date)) = '07' then 'july'
        when format_date ('%m', date (date)) = '08' then 'august'
        when format_date ('%m', date (date)) = '09' then 'september'
        when format_date ('%m', date (date)) = '10' then 'october'
        when format_date ('%m', date (date)) = '11' then 'november'
        when format_date ('%m', date (date)) = '12' then 'december'
    end as month,
    format_date ('%m', date (date)) as month_id, -- sort month
    extract(year from date) as year, -- can be sorted by itself
    'W' || format_date ('%W', date (date)) as week, -- can be sorted by itself
    extract(dayofweek from date) as weekday_id, -- sort weekday
    case
        when extract(dayofweek from date) = 1 then 'sunday'
        when extract(dayofweek from date) = 2 then 'monday'
        when extract(dayofweek from date) = 3 then 'tuesday'
        when extract(dayofweek from date) = 4 then 'wednesday'
        when extract(dayofweek from date) = 5 then 'thursday'
        when extract(dayofweek from date) = 6 then 'friday'
        when extract(dayofweek from date) = 7 then 'saturday'
    end as weekday,
    case
        when 6 = 1 then 'FY' || extract(year from date)
        when extract(month from date) >= 6 then 'FY' || right(cast(extract(year from date) as string),2) || '/' || right(cast(extract(year from date)+1 as string),2)
        when extract(month from date) < 6 then 'FY' || right(cast(extract(year from date)-1 as string),2) || '/' || right(cast(extract(year from date) as string),2)
    end as fiscal_year,
    case
        when 6 = 1 then 'FY' || extract(year from date)
        when extract(month from date) >= 6 then 'FY' || right(cast(extract(year from date) as string),2) || '/' || right(cast(extract(year from date)+1 as string),2)
        when extract(month from date) < 6 then 'FY' || right(cast(extract(year from date)-1 as string),2) || '/' || right(cast(extract(year from date) as string),2)
    end || ' Q' || extract(quarter from date_add(date, interval abs(6-13) month)) as fiscal_year_quarter,
    case
        when 3 = 1 then 'FY' || extract(year from date)
        when extract(month from date) >= 6 then 'FY' || right(cast(extract(year from date) as string),2) || '/' || right(cast(extract(year from date)+1 as string),2)
        when extract(month from date) < 6 then 'FY' || right(cast(extract(year from date)-1 as string),2) || '/' || right(cast(extract(year from date) as string),2)
    end || ' W' || format_date ('%W', date (date_add(date, interval abs(6-13) month))) as fiscal_year_week
FROM
UNNEST(
	GENERATE_DATE_ARRAY(
		DATE_TRUNC(DATE '2022-01-01', YEAR) , -- first_year param = take the year from the first date from config
    		CURRENT_DATE(),
		INTERVAL 1 DAY
	)
) as date
order by date asc

);
